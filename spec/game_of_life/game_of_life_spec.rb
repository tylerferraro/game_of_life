RSpec.describe GameOfLife do
  describe 'Test Cases' do
    let!(:data_a) {
      [
        [0, 0, 2, 2, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 3, 1, 0, 0, 0],
        [0, 0, 0, 2, 0, 3, 0, 0, 1, 3],
        [0, 0, 0, 0, 1, 3, 0, 0, 0, 3],
        [0, 2, 2, 0, 0, 0, 1, 3, 1, 0],
        [0, 0, 0, 0, 0, 2, 2, 0, 0, 0],
        [0, 0, 2, 0, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    }

    let!(:mutation_a) {
      [
        [0, 0, 3, 3, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 0, 2, 0, 0, 0],
        [0, 0, 0, 3, 0, 0, 0, 0, 2, 0],
        [0, 1, 0, 1, 2, 0, 0, 0, 0, 0],
        [0, 3, 3, 0, 0, 1, 2, 0, 2, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 3, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      ]
    }

    it 'Correctly mutates Test #1' do
      game = GameOfLife::Game.new(data_a)
      game.tick

      expect(game.board.to_a).to eq(mutation_a)
    end

    let!(:data_b) {
      [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 2, 0, 0, 0],
        [0, 0, 3, 3, 2, 0, 0, 0, 2, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 2, 0],
        [0, 0, 3, 0, 0, 1, 2, 0, 0, 0],
        [0, 0, 1, 3, 3, 3, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    }

    let!(:mutation_b) {
      [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 2, 2, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 3, 1, 0, 0, 3, 1],
        [0, 2, 0, 0, 0, 1, 0, 0, 3, 1],
        [0, 0, 0, 0, 0, 2, 3, 1, 0, 0],
        [0, 0, 2, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      ]
    }

    it 'Correctly mutates Test #2' do
      game = GameOfLife::Game.new(data_b)
      game.tick

      expect(game.board.to_a).to eq(mutation_b)
    end

    let!(:data_c) {
      [
        [0, 0, 0, 0, 1, 3, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 3, 0, 0, 0, 0],
        [0, 0, 2, 0, 0, 0, 0, 3, 1, 0],
        [0, 0, 2, 0, 2, 3, 0, 0, 3, 0],
        [0, 0, 2, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 0, 2, 1, 3, 1, 0],
        [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    }

    let!(:mutation_c) {
      [
        [0, 0, 0, 0, 2, 0, 2, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 3, 0, 0, 0, 0, 0, 2, 0],
        [0, 0, 3, 0, 3, 0, 0, 0, 0, 0],
        [0, 1, 3, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 2, 0, 2, 0],
        [0, 0, 0, 0, 3, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0,0,  0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    }

    it 'Correctly mutates Test #2' do
      game = GameOfLife::Game.new(data_c)
      game.tick

      expect(game.board.to_a).to eq(mutation_c)
    end
  end
end
